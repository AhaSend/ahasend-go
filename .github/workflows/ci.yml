name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  # Lint and format check
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1

  # Unit tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.19', '1.20', '1.21']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: |
          go test -v -race -short -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        if: matrix.go-version == env.GO_VERSION
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage artifacts
        if: matrix.go-version == env.GO_VERSION
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  # Integration tests with Prism
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Prism CLI
        run: |
          npm install -g @stoplight/prism-cli@5
          prism --version

      - name: Download Go dependencies
        run: go mod download

      - name: Run integration tests
        run: |
          # Set timeout for integration tests (10 minutes)
          go test -v -timeout=10m -tags=integration ./test/
        env:
          # Don't skip integration tests
          SKIP_INTEGRATION_TESTS: false

      - name: Upload integration test logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs
          path: |
            test/*.log
            /tmp/prism*.log

  # Build and test release
  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: [lint, test, integration]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for version calculation
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build SDK
        run: |
          # Ensure the SDK builds correctly
          go build -v ./...

      - name: Test installation simulation
        run: |
          # Test that the SDK can be imported and used
          cd /tmp
          go mod init test-ahasend-sdk
          go get github.com/AhaSend/ahasend-go@main || echo "Module not published yet, skipping"

      - name: Generate build info
        run: |
          echo "Build Information:" > build-info.txt
          echo "Git Commit: $(git rev-parse HEAD)" >> build-info.txt
          echo "Git Branch: $(git rev-parse --abbrev-ref HEAD)" >> build-info.txt
          echo "Build Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> build-info.txt
          echo "Go Version: $(go version)" >> build-info.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build-info.txt

  # Notify on completion
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint, test, integration, build]
    if: always()

    steps:
      - name: Notify success
        if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.integration.result == 'success'
        run: |
          echo "üéâ All CI checks passed successfully!"

      - name: Notify failure
        if: needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.integration.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "‚ùå Some CI checks failed. Please review the logs."
          exit 1

# Separate job for dependency updates
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high

      - name: Go mod tidy check
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "go.mod or go.sum is not tidy"
            git diff go.mod go.sum
            exit 1
          fi
